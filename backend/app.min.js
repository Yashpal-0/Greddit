const express = require("express"), app = express(), mongoose = require("mongoose"), cors = require("cors"), bcrypt = require("bcryptjs"), jwt = require("jsonwebtoken"), JWT_SCERET = "sdfghjkll1234567[](){}//\\:-)8=========>"; app.use(express.json()), app.use(cors()); const mongobdURL = "mongodb+srv://admin123:admin123@greddiit.zuktoko.mongodb.net/?retryWrites=true&w=majority"; mongoose.set("strictQuery", !1), mongoose.connect(mongobdURL, { useNewUrlParser: !0 }).then(() => { console.log("conected to mongodb") }).catch(e => console.log(e)), app.listen(8080, () => { console.log("Sever Started") }), app.post("/post", async (req, res) => { console.log(req.body); const { data: data } = req.body; console.log(data); try { "kabir" == data ? res.send({ status: "ok" }) : (console.log(data), res.send({ status: "not ok" })) } catch { res.send({ status: "error" }) } }), require("./userDetails"); const User = mongoose.model("UserInfo"); app.post("/register", async (req, res) => { const { fname: fname, lname: lname, email: email, password: password, contact: contact, age: age } = req.body, Encryptedpassword = await bcrypt.hash(password, 12); try { const oldUser = await User.findOne({ email: email }), old = await User.findOne({ contact: contact }); if (oldUser) return res.send({ error: "User Already Exsist" }); if (old) return res.send({ error: "User Already Exsist" }); await User.create({ fname: fname, lname: lname, email: email, password: Encryptedpassword, contact: contact, age: age }), res.send({ status: "ok" }) } catch (error) { res.send({ error: "error123" }) } }), app.post("/login", async (req, res) => { const { email: email, password: password } = req.body, user = await User.findOne({ email: email }); if (!user) return res.send({ error: "User Not Exsist" }); if (await bcrypt.compare(password, user.password)) { const token = jwt.sign({ email: user.email }, JWT_SCERET); return res.status(201) ? res.json({ status: "ok", data: token }) : res.send({ error: "ERROR" }) } res.send({ error: "User Not Exsist or Password Incorrect" }) }), app.post("/Userprofile", async (req, res) => { const { token: token } = req.body; try { const user = jwt.verify(token, JWT_SCERET), email = user.email; User.findOne({ email: email }).then(data => { res.send({ status: "ok", data: data }) }), res.send({ error: "Error", data: error }) } catch (error) { } }), app.post("/forgot-password", async (req, res) => { const { email: email } = req.body; try { const oldUser = await User.findOne({ email: email }); if (!oldUser) return res.send("User Not Found"); const secret = JWT_SCERET + oldUser.password, token = jwt.sign({ email: oldUser.email, id: oldUser._id }, secret, { expiresIn: "5m" }), link = `http://10.2.138.72:3000/reset-password/${oldUser._id}/${tokens}$`; console.log(link) } catch (error) { } }), app.get("/reset-password", async (req, res) => { const { id: id, token: token } = req.params; console.log(req.params) });